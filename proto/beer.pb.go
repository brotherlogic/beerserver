// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beer.proto

/*
Package beer is a generated protocol buffer package.

It is generated from these files:
	beer.proto

It has these top-level messages:
	Empty
	Token
	Config
	Beer
	CellarSlot
	Cellar
	AddBeerRequest
	AddBeerResponse
	ListBeerRequest
	ListBeerResponse
*/
package beer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Token struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
	Rtoken string `protobuf:"bytes,3,opt,name=rtoken" json:"rtoken,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Token) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Token) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Token) GetRtoken() string {
	if m != nil {
		return m.Rtoken
	}
	return ""
}

type Config struct {
	Token  *Token  `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Drunk  []*Beer `protobuf:"bytes,2,rep,name=drunk" json:"drunk,omitempty"`
	Cellar *Cellar `protobuf:"bytes,3,opt,name=cellar" json:"cellar,omitempty"`
}

func (m *Config) Reset()                    { *m = Config{} }
func (m *Config) String() string            { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()               {}
func (*Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Config) GetToken() *Token {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *Config) GetDrunk() []*Beer {
	if m != nil {
		return m.Drunk
	}
	return nil
}

func (m *Config) GetCellar() *Cellar {
	if m != nil {
		return m.Cellar
	}
	return nil
}

type Beer struct {
	Id        int64   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DrinkDate int64   `protobuf:"varint,2,opt,name=drink_date,json=drinkDate" json:"drink_date,omitempty"`
	Size      string  `protobuf:"bytes,3,opt,name=size" json:"size,omitempty"`
	Name      string  `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	OnDeck    bool    `protobuf:"varint,5,opt,name=on_deck,json=onDeck" json:"on_deck,omitempty"`
	Abv       float32 `protobuf:"fixed32,6,opt,name=abv" json:"abv,omitempty"`
	Index     int32   `protobuf:"varint,7,opt,name=index" json:"index,omitempty"`
	CheckinId int32   `protobuf:"varint,8,opt,name=checkin_id,json=checkinId" json:"checkin_id,omitempty"`
	InCellar  int32   `protobuf:"varint,9,opt,name=in_cellar,json=inCellar" json:"in_cellar,omitempty"`
}

func (m *Beer) Reset()                    { *m = Beer{} }
func (m *Beer) String() string            { return proto.CompactTextString(m) }
func (*Beer) ProtoMessage()               {}
func (*Beer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Beer) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Beer) GetDrinkDate() int64 {
	if m != nil {
		return m.DrinkDate
	}
	return 0
}

func (m *Beer) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *Beer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Beer) GetOnDeck() bool {
	if m != nil {
		return m.OnDeck
	}
	return false
}

func (m *Beer) GetAbv() float32 {
	if m != nil {
		return m.Abv
	}
	return 0
}

func (m *Beer) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Beer) GetCheckinId() int32 {
	if m != nil {
		return m.CheckinId
	}
	return 0
}

func (m *Beer) GetInCellar() int32 {
	if m != nil {
		return m.InCellar
	}
	return 0
}

type CellarSlot struct {
	Accepts  string  `protobuf:"bytes,1,opt,name=accepts" json:"accepts,omitempty"`
	NumSlots int32   `protobuf:"varint,2,opt,name=num_slots,json=numSlots" json:"num_slots,omitempty"`
	Beers    []*Beer `protobuf:"bytes,3,rep,name=beers" json:"beers,omitempty"`
}

func (m *CellarSlot) Reset()                    { *m = CellarSlot{} }
func (m *CellarSlot) String() string            { return proto.CompactTextString(m) }
func (*CellarSlot) ProtoMessage()               {}
func (*CellarSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CellarSlot) GetAccepts() string {
	if m != nil {
		return m.Accepts
	}
	return ""
}

func (m *CellarSlot) GetNumSlots() int32 {
	if m != nil {
		return m.NumSlots
	}
	return 0
}

func (m *CellarSlot) GetBeers() []*Beer {
	if m != nil {
		return m.Beers
	}
	return nil
}

type Cellar struct {
	Slots  []*CellarSlot `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty"`
	OnDeck []*Beer       `protobuf:"bytes,2,rep,name=on_deck,json=onDeck" json:"on_deck,omitempty"`
}

func (m *Cellar) Reset()                    { *m = Cellar{} }
func (m *Cellar) String() string            { return proto.CompactTextString(m) }
func (*Cellar) ProtoMessage()               {}
func (*Cellar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Cellar) GetSlots() []*CellarSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *Cellar) GetOnDeck() []*Beer {
	if m != nil {
		return m.OnDeck
	}
	return nil
}

type AddBeerRequest struct {
	Beer     *Beer `protobuf:"bytes,1,opt,name=beer" json:"beer,omitempty"`
	Quantity int32 `protobuf:"varint,2,opt,name=quantity" json:"quantity,omitempty"`
}

func (m *AddBeerRequest) Reset()                    { *m = AddBeerRequest{} }
func (m *AddBeerRequest) String() string            { return proto.CompactTextString(m) }
func (*AddBeerRequest) ProtoMessage()               {}
func (*AddBeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddBeerRequest) GetBeer() *Beer {
	if m != nil {
		return m.Beer
	}
	return nil
}

func (m *AddBeerRequest) GetQuantity() int32 {
	if m != nil {
		return m.Quantity
	}
	return 0
}

type AddBeerResponse struct {
}

func (m *AddBeerResponse) Reset()                    { *m = AddBeerResponse{} }
func (m *AddBeerResponse) String() string            { return proto.CompactTextString(m) }
func (*AddBeerResponse) ProtoMessage()               {}
func (*AddBeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ListBeerRequest struct {
	OnDeck bool `protobuf:"varint,1,opt,name=on_deck,json=onDeck" json:"on_deck,omitempty"`
}

func (m *ListBeerRequest) Reset()                    { *m = ListBeerRequest{} }
func (m *ListBeerRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBeerRequest) ProtoMessage()               {}
func (*ListBeerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListBeerRequest) GetOnDeck() bool {
	if m != nil {
		return m.OnDeck
	}
	return false
}

type ListBeerResponse struct {
	Beers []*Beer `protobuf:"bytes,1,rep,name=beers" json:"beers,omitempty"`
}

func (m *ListBeerResponse) Reset()                    { *m = ListBeerResponse{} }
func (m *ListBeerResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBeerResponse) ProtoMessage()               {}
func (*ListBeerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListBeerResponse) GetBeers() []*Beer {
	if m != nil {
		return m.Beers
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "beer.Empty")
	proto.RegisterType((*Token)(nil), "beer.Token")
	proto.RegisterType((*Config)(nil), "beer.Config")
	proto.RegisterType((*Beer)(nil), "beer.Beer")
	proto.RegisterType((*CellarSlot)(nil), "beer.CellarSlot")
	proto.RegisterType((*Cellar)(nil), "beer.Cellar")
	proto.RegisterType((*AddBeerRequest)(nil), "beer.AddBeerRequest")
	proto.RegisterType((*AddBeerResponse)(nil), "beer.AddBeerResponse")
	proto.RegisterType((*ListBeerRequest)(nil), "beer.ListBeerRequest")
	proto.RegisterType((*ListBeerResponse)(nil), "beer.ListBeerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BeerCellarService service

type BeerCellarServiceClient interface {
	AddBeer(ctx context.Context, in *AddBeerRequest, opts ...grpc.CallOption) (*AddBeerResponse, error)
	ListBeers(ctx context.Context, in *ListBeerRequest, opts ...grpc.CallOption) (*ListBeerResponse, error)
}

type beerCellarServiceClient struct {
	cc *grpc.ClientConn
}

func NewBeerCellarServiceClient(cc *grpc.ClientConn) BeerCellarServiceClient {
	return &beerCellarServiceClient{cc}
}

func (c *beerCellarServiceClient) AddBeer(ctx context.Context, in *AddBeerRequest, opts ...grpc.CallOption) (*AddBeerResponse, error) {
	out := new(AddBeerResponse)
	err := grpc.Invoke(ctx, "/beer.BeerCellarService/AddBeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerCellarServiceClient) ListBeers(ctx context.Context, in *ListBeerRequest, opts ...grpc.CallOption) (*ListBeerResponse, error) {
	out := new(ListBeerResponse)
	err := grpc.Invoke(ctx, "/beer.BeerCellarService/ListBeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BeerCellarService service

type BeerCellarServiceServer interface {
	AddBeer(context.Context, *AddBeerRequest) (*AddBeerResponse, error)
	ListBeers(context.Context, *ListBeerRequest) (*ListBeerResponse, error)
}

func RegisterBeerCellarServiceServer(s *grpc.Server, srv BeerCellarServiceServer) {
	s.RegisterService(&_BeerCellarService_serviceDesc, srv)
}

func _BeerCellarService_AddBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).AddBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerCellarService/AddBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).AddBeer(ctx, req.(*AddBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerCellarService_ListBeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).ListBeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerCellarService/ListBeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).ListBeers(ctx, req.(*ListBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeerCellarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "beer.BeerCellarService",
	HandlerType: (*BeerCellarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBeer",
			Handler:    _BeerCellarService_AddBeer_Handler,
		},
		{
			MethodName: "ListBeers",
			Handler:    _BeerCellarService_ListBeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beer.proto",
}

func init() { proto.RegisterFile("beer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0xfd, 0x39, 0x8e, 0x9d, 0x78, 0xf2, 0x53, 0x9b, 0x8e, 0x4a, 0x59, 0x05, 0x81, 0x8c, 0x41,
	0x28, 0xe2, 0xd0, 0x43, 0xe0, 0xc0, 0x81, 0x0b, 0xb4, 0x08, 0x21, 0xf5, 0xb4, 0xc0, 0x39, 0x72,
	0xbc, 0x03, 0xac, 0x9c, 0xac, 0x53, 0xef, 0xa6, 0xa2, 0x7c, 0x05, 0xbe, 0x21, 0x9f, 0x06, 0xed,
	0x1f, 0x13, 0x93, 0x8a, 0xdb, 0xcc, 0x9b, 0x79, 0x33, 0xf3, 0xde, 0xda, 0x00, 0x2b, 0xa2, 0xf6,
	0x7c, 0xdb, 0x36, 0xa6, 0xc1, 0xa1, 0x8d, 0x8b, 0x11, 0x24, 0xef, 0x36, 0x5b, 0x73, 0x5b, 0xbc,
	0x87, 0xe4, 0x53, 0x53, 0x93, 0xc2, 0x23, 0x18, 0x48, 0xc1, 0xa2, 0x3c, 0x9a, 0x67, 0x7c, 0x20,
	0x05, 0x9e, 0x41, 0xaa, 0xa9, 0x6a, 0xc9, 0xb0, 0x81, 0xc3, 0x42, 0x66, 0xf1, 0xd6, 0x58, 0x06,
	0x8b, 0x3d, 0xee, 0xb3, 0x42, 0x43, 0x7a, 0xd1, 0xa8, 0x2f, 0xf2, 0x2b, 0x3e, 0x86, 0xc4, 0x37,
	0xd8, 0x61, 0x93, 0xc5, 0xe4, 0xdc, 0x6d, 0x77, 0x5b, 0xb8, 0xaf, 0x60, 0x0e, 0x89, 0x68, 0x77,
	0xaa, 0x66, 0x83, 0x3c, 0x9e, 0x4f, 0x16, 0xe0, 0x5b, 0xde, 0x12, 0xb5, 0xdc, 0x17, 0xf0, 0x29,
	0xa4, 0x15, 0xad, 0xd7, 0x65, 0xeb, 0xd6, 0x4c, 0x16, 0xff, 0xfb, 0x96, 0x0b, 0x87, 0xf1, 0x50,
	0x2b, 0x7e, 0x45, 0x30, 0xb4, 0xac, 0xde, 0xf5, 0xb1, 0xbb, 0xfe, 0x21, 0x80, 0x68, 0xa5, 0xaa,
	0x97, 0xa2, 0x34, 0xe4, 0x14, 0xc4, 0x3c, 0x73, 0xc8, 0x65, 0x69, 0x08, 0x11, 0x86, 0x5a, 0xfe,
	0xa0, 0x20, 0xc1, 0xc5, 0x16, 0x53, 0xe5, 0x86, 0xd8, 0xd0, 0x63, 0x36, 0xc6, 0xfb, 0x30, 0x6a,
	0xd4, 0x52, 0x50, 0x55, 0xb3, 0x24, 0x8f, 0xe6, 0x63, 0x9e, 0x36, 0xea, 0x92, 0xaa, 0x1a, 0xa7,
	0x10, 0x97, 0xab, 0x1b, 0x96, 0xe6, 0xd1, 0x7c, 0xc0, 0x6d, 0x88, 0xa7, 0x90, 0x48, 0x25, 0xe8,
	0x3b, 0x1b, 0xe5, 0xd1, 0x3c, 0xe1, 0x3e, 0xb1, 0x77, 0x54, 0xdf, 0xa8, 0xaa, 0xa5, 0x5a, 0x4a,
	0xc1, 0xc6, 0xae, 0x94, 0x05, 0xe4, 0x83, 0xc0, 0x07, 0x90, 0x49, 0xb5, 0x0c, 0x42, 0x33, 0x57,
	0x1d, 0x4b, 0xe5, 0x45, 0x16, 0x04, 0xe0, 0xa3, 0x8f, 0xeb, 0xc6, 0x20, 0x83, 0x51, 0x59, 0x55,
	0xb4, 0x35, 0x3a, 0x3c, 0x52, 0x97, 0xda, 0x21, 0x6a, 0xb7, 0x59, 0xea, 0x75, 0x63, 0xb4, 0x93,
	0x9a, 0xf0, 0xb1, 0xda, 0x6d, 0x2c, 0x4b, 0x5b, 0xa7, 0xad, 0x71, 0x9a, 0xc5, 0x77, 0x9d, 0x76,
	0x85, 0xe2, 0x33, 0xa4, 0x7e, 0x0d, 0x3e, 0x83, 0xc4, 0x0f, 0x89, 0x5c, 0xef, 0xb4, 0x6f, 0xb9,
	0x9d, 0xc6, 0x7d, 0x19, 0x9f, 0xec, 0x5d, 0xb9, 0xfb, 0x7e, 0xc1, 0xa1, 0xe2, 0x0a, 0x8e, 0xde,
	0x08, 0xe1, 0x20, 0xba, 0xde, 0x91, 0x36, 0xf8, 0x08, 0xdc, 0xb7, 0x17, 0x3e, 0x8b, 0x3e, 0xc7,
	0xe1, 0x38, 0x83, 0xf1, 0xf5, 0xae, 0x54, 0x46, 0x9a, 0xdb, 0x4e, 0x46, 0x97, 0x17, 0x27, 0x70,
	0xfc, 0x67, 0x9a, 0xde, 0x36, 0x4a, 0x53, 0xf1, 0x1c, 0x8e, 0xaf, 0xa4, 0x36, 0xfd, 0x0d, 0xbd,
	0xe7, 0x8a, 0xfa, 0xcf, 0x55, 0xbc, 0x84, 0xe9, 0xbe, 0xd7, 0xf3, 0xf7, 0xce, 0x44, 0xff, 0x70,
	0x66, 0xf1, 0x33, 0x82, 0x13, 0x9b, 0x07, 0x07, 0xa8, 0xbd, 0x91, 0x15, 0xe1, 0x2b, 0x18, 0x85,
	0x53, 0xf0, 0xd4, 0x73, 0xfe, 0xd6, 0x39, 0xbb, 0x77, 0x80, 0x86, 0x7b, 0xff, 0xc3, 0xd7, 0x90,
	0x75, 0x57, 0x68, 0x0c, 0x5d, 0x07, 0x12, 0x66, 0x67, 0x87, 0x70, 0xc7, 0x5e, 0xa5, 0xee, 0xff,
	0x7d, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x9b, 0x59, 0x25, 0xcd, 0x03, 0x00, 0x00,
}
