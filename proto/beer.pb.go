// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beer.proto

/*
Package beer is a generated protocol buffer package.

It is generated from these files:
	beer.proto

It has these top-level messages:
	Empty
	Token
	Beer
	Cellar
	BeerCellar
*/
package beer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Token struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Secret string `protobuf:"bytes,2,opt,name=secret" json:"secret,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Token) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Token) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type Beer struct {
	Id        int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	DrinkDate int64  `protobuf:"varint,2,opt,name=drink_date,json=drinkDate" json:"drink_date,omitempty"`
	Size      string `protobuf:"bytes,3,opt,name=size" json:"size,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (m *Beer) Reset()                    { *m = Beer{} }
func (m *Beer) String() string            { return proto.CompactTextString(m) }
func (*Beer) ProtoMessage()               {}
func (*Beer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Beer) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Beer) GetDrinkDate() int64 {
	if m != nil {
		return m.DrinkDate
	}
	return 0
}

func (m *Beer) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *Beer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Cellar struct {
	Name  string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Beers []*Beer `protobuf:"bytes,2,rep,name=beers" json:"beers,omitempty"`
}

func (m *Cellar) Reset()                    { *m = Cellar{} }
func (m *Cellar) String() string            { return proto.CompactTextString(m) }
func (*Cellar) ProtoMessage()               {}
func (*Cellar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Cellar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cellar) GetBeers() []*Beer {
	if m != nil {
		return m.Beers
	}
	return nil
}

type BeerCellar struct {
	Name          string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	SyncTime      int64     `protobuf:"varint,2,opt,name=syncTime" json:"syncTime,omitempty"`
	UntappdKey    string    `protobuf:"bytes,3,opt,name=untappdKey" json:"untappdKey,omitempty"`
	UntappdSecret string    `protobuf:"bytes,4,opt,name=untappdSecret" json:"untappdSecret,omitempty"`
	Cellars       []*Cellar `protobuf:"bytes,5,rep,name=cellars" json:"cellars,omitempty"`
	Drunk         []*Beer   `protobuf:"bytes,6,rep,name=drunk" json:"drunk,omitempty"`
}

func (m *BeerCellar) Reset()                    { *m = BeerCellar{} }
func (m *BeerCellar) String() string            { return proto.CompactTextString(m) }
func (*BeerCellar) ProtoMessage()               {}
func (*BeerCellar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BeerCellar) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BeerCellar) GetSyncTime() int64 {
	if m != nil {
		return m.SyncTime
	}
	return 0
}

func (m *BeerCellar) GetUntappdKey() string {
	if m != nil {
		return m.UntappdKey
	}
	return ""
}

func (m *BeerCellar) GetUntappdSecret() string {
	if m != nil {
		return m.UntappdSecret
	}
	return ""
}

func (m *BeerCellar) GetCellars() []*Cellar {
	if m != nil {
		return m.Cellars
	}
	return nil
}

func (m *BeerCellar) GetDrunk() []*Beer {
	if m != nil {
		return m.Drunk
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "beer.Empty")
	proto.RegisterType((*Token)(nil), "beer.Token")
	proto.RegisterType((*Beer)(nil), "beer.Beer")
	proto.RegisterType((*Cellar)(nil), "beer.Cellar")
	proto.RegisterType((*BeerCellar)(nil), "beer.BeerCellar")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BeerCellarService service

type BeerCellarServiceClient interface {
	AddBeer(ctx context.Context, in *Beer, opts ...grpc.CallOption) (*Cellar, error)
	GetBeer(ctx context.Context, in *Beer, opts ...grpc.CallOption) (*Beer, error)
	GetCellar(ctx context.Context, in *Cellar, opts ...grpc.CallOption) (*Cellar, error)
	RemoveBeer(ctx context.Context, in *Beer, opts ...grpc.CallOption) (*Beer, error)
}

type beerCellarServiceClient struct {
	cc *grpc.ClientConn
}

func NewBeerCellarServiceClient(cc *grpc.ClientConn) BeerCellarServiceClient {
	return &beerCellarServiceClient{cc}
}

func (c *beerCellarServiceClient) AddBeer(ctx context.Context, in *Beer, opts ...grpc.CallOption) (*Cellar, error) {
	out := new(Cellar)
	err := grpc.Invoke(ctx, "/beer.BeerCellarService/AddBeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerCellarServiceClient) GetBeer(ctx context.Context, in *Beer, opts ...grpc.CallOption) (*Beer, error) {
	out := new(Beer)
	err := grpc.Invoke(ctx, "/beer.BeerCellarService/GetBeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerCellarServiceClient) GetCellar(ctx context.Context, in *Cellar, opts ...grpc.CallOption) (*Cellar, error) {
	out := new(Cellar)
	err := grpc.Invoke(ctx, "/beer.BeerCellarService/GetCellar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerCellarServiceClient) RemoveBeer(ctx context.Context, in *Beer, opts ...grpc.CallOption) (*Beer, error) {
	out := new(Beer)
	err := grpc.Invoke(ctx, "/beer.BeerCellarService/RemoveBeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BeerCellarService service

type BeerCellarServiceServer interface {
	AddBeer(context.Context, *Beer) (*Cellar, error)
	GetBeer(context.Context, *Beer) (*Beer, error)
	GetCellar(context.Context, *Cellar) (*Cellar, error)
	RemoveBeer(context.Context, *Beer) (*Beer, error)
}

func RegisterBeerCellarServiceServer(s *grpc.Server, srv BeerCellarServiceServer) {
	s.RegisterService(&_BeerCellarService_serviceDesc, srv)
}

func _BeerCellarService_AddBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).AddBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerCellarService/AddBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).AddBeer(ctx, req.(*Beer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerCellarService_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerCellarService/GetBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).GetBeer(ctx, req.(*Beer))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerCellarService_GetCellar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cellar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).GetCellar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerCellarService/GetCellar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).GetCellar(ctx, req.(*Cellar))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerCellarService_RemoveBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Beer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).RemoveBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beer.BeerCellarService/RemoveBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).RemoveBeer(ctx, req.(*Beer))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeerCellarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "beer.BeerCellarService",
	HandlerType: (*BeerCellarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBeer",
			Handler:    _BeerCellarService_AddBeer_Handler,
		},
		{
			MethodName: "GetBeer",
			Handler:    _BeerCellarService_GetBeer_Handler,
		},
		{
			MethodName: "GetCellar",
			Handler:    _BeerCellarService_GetCellar_Handler,
		},
		{
			MethodName: "RemoveBeer",
			Handler:    _BeerCellarService_RemoveBeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beer.proto",
}

func init() { proto.RegisterFile("beer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x6b, 0xea, 0x40,
	0x14, 0xc5, 0xcd, 0xff, 0xe7, 0x79, 0xef, 0x15, 0x3a, 0x8b, 0x12, 0x84, 0x16, 0x99, 0xb6, 0x62,
	0x37, 0x16, 0xec, 0xbe, 0xd0, 0x7f, 0xb8, 0xe8, 0x2e, 0xba, 0x2d, 0x25, 0x66, 0xee, 0x22, 0x68,
	0xfe, 0x30, 0x19, 0x05, 0xfb, 0xb1, 0xfa, 0x39, 0xfa, 0xa1, 0xca, 0x4c, 0xa2, 0x46, 0x04, 0x77,
	0xf7, 0x9e, 0x73, 0xe7, 0xcc, 0xef, 0x4e, 0x02, 0xcc, 0x89, 0xe4, 0xa8, 0x94, 0x85, 0x2a, 0x98,
	0xab, 0x6b, 0x1e, 0xc0, 0x7b, 0xcb, 0x4a, 0xb5, 0xe1, 0xf7, 0xf0, 0x66, 0xc5, 0x82, 0x72, 0x76,
	0x06, 0x3b, 0x15, 0xa1, 0xd5, 0xb7, 0x86, 0xdd, 0xc8, 0x4e, 0x05, 0xbb, 0x80, 0x5f, 0x51, 0x22,
	0x49, 0x85, 0xb6, 0xd1, 0x9a, 0x8e, 0x7f, 0xc0, 0x7d, 0x26, 0x92, 0xad, 0x79, 0xc7, 0xcc, 0x5f,
	0x02, 0x42, 0xa6, 0xf9, 0xe2, 0x53, 0xc4, 0x8a, 0xcc, 0x19, 0x27, 0xea, 0x1a, 0xe5, 0x35, 0x56,
	0xc4, 0x18, 0xdc, 0x2a, 0xfd, 0xa2, 0xd0, 0x31, 0x61, 0xa6, 0xd6, 0x5a, 0x1e, 0x67, 0x14, 0xba,
	0xb5, 0xa6, 0x6b, 0xfe, 0x08, 0xff, 0x85, 0x96, 0xcb, 0x58, 0xee, 0x5c, 0x6b, 0xef, 0xb2, 0x3e,
	0x3c, 0x8d, 0x5f, 0x85, 0x76, 0xdf, 0x19, 0xfe, 0x1d, 0x63, 0x64, 0x16, 0xd3, 0x3c, 0x51, 0x6d,
	0xf0, 0x1f, 0x0b, 0xd0, 0xfd, 0x89, 0x90, 0x1e, 0xfe, 0x54, 0x9b, 0x3c, 0x99, 0xa5, 0xd9, 0x96,
	0x73, 0xd7, 0xb3, 0x2b, 0x60, 0x95, 0xab, 0xb8, 0x2c, 0xc5, 0x3b, 0x6d, 0x1a, 0xd8, 0x96, 0xc2,
	0x6e, 0xf0, 0xbf, 0xe9, 0xa6, 0xf5, 0xe3, 0xd4, 0xec, 0x87, 0x22, 0x1b, 0x20, 0x48, 0xcc, 0xfd,
	0x55, 0xe8, 0x19, 0xd0, 0x7f, 0x35, 0x68, 0x0d, 0x15, 0x6d, 0x4d, 0xbd, 0x8e, 0x90, 0xab, 0x7c,
	0x11, 0xfa, 0xc7, 0xeb, 0x18, 0x63, 0xfc, 0x6d, 0xe1, 0x7c, 0xbf, 0xce, 0x94, 0xe4, 0x3a, 0x4d,
	0x88, 0xdd, 0x22, 0x78, 0x12, 0xc2, 0x7c, 0x86, 0xd6, 0x99, 0xde, 0xc1, 0x2d, 0xbc, 0xc3, 0xae,
	0x11, 0x4c, 0x48, 0x1d, 0x8d, 0xb5, 0x6a, 0xde, 0x61, 0x77, 0xe8, 0x4e, 0x48, 0x35, 0xcf, 0x75,
	0x90, 0x70, 0x94, 0x37, 0x00, 0x22, 0xca, 0x8a, 0x35, 0x9d, 0x8e, 0x9c, 0xfb, 0xe6, 0x4f, 0x7b,
	0xf8, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x19, 0xc3, 0x1d, 0x77, 0x02, 0x00, 0x00,
}
