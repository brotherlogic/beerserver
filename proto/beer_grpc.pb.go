// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package beerserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BeerCellarServiceClient is the client API for BeerCellarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeerCellarServiceClient interface {
	AddBeer(ctx context.Context, in *AddBeerRequest, opts ...grpc.CallOption) (*AddBeerResponse, error)
	DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*DeleteBeerResponse, error)
	ListBeers(ctx context.Context, in *ListBeerRequest, opts ...grpc.CallOption) (*ListBeerResponse, error)
	Consolidate(ctx context.Context, in *ConsolidateRequest, opts ...grpc.CallOption) (*ConsolidateResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
}

type beerCellarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeerCellarServiceClient(cc grpc.ClientConnInterface) BeerCellarServiceClient {
	return &beerCellarServiceClient{cc}
}

func (c *beerCellarServiceClient) AddBeer(ctx context.Context, in *AddBeerRequest, opts ...grpc.CallOption) (*AddBeerResponse, error) {
	out := new(AddBeerResponse)
	err := c.cc.Invoke(ctx, "/beerserver.BeerCellarService/AddBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerCellarServiceClient) DeleteBeer(ctx context.Context, in *DeleteBeerRequest, opts ...grpc.CallOption) (*DeleteBeerResponse, error) {
	out := new(DeleteBeerResponse)
	err := c.cc.Invoke(ctx, "/beerserver.BeerCellarService/DeleteBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerCellarServiceClient) ListBeers(ctx context.Context, in *ListBeerRequest, opts ...grpc.CallOption) (*ListBeerResponse, error) {
	out := new(ListBeerResponse)
	err := c.cc.Invoke(ctx, "/beerserver.BeerCellarService/ListBeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerCellarServiceClient) Consolidate(ctx context.Context, in *ConsolidateRequest, opts ...grpc.CallOption) (*ConsolidateResponse, error) {
	out := new(ConsolidateResponse)
	err := c.cc.Invoke(ctx, "/beerserver.BeerCellarService/Consolidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beerCellarServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/beerserver.BeerCellarService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeerCellarServiceServer is the server API for BeerCellarService service.
// All implementations should embed UnimplementedBeerCellarServiceServer
// for forward compatibility
type BeerCellarServiceServer interface {
	AddBeer(context.Context, *AddBeerRequest) (*AddBeerResponse, error)
	DeleteBeer(context.Context, *DeleteBeerRequest) (*DeleteBeerResponse, error)
	ListBeers(context.Context, *ListBeerRequest) (*ListBeerResponse, error)
	Consolidate(context.Context, *ConsolidateRequest) (*ConsolidateResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
}

// UnimplementedBeerCellarServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBeerCellarServiceServer struct {
}

func (UnimplementedBeerCellarServiceServer) AddBeer(context.Context, *AddBeerRequest) (*AddBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBeer not implemented")
}
func (UnimplementedBeerCellarServiceServer) DeleteBeer(context.Context, *DeleteBeerRequest) (*DeleteBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBeer not implemented")
}
func (UnimplementedBeerCellarServiceServer) ListBeers(context.Context, *ListBeerRequest) (*ListBeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBeers not implemented")
}
func (UnimplementedBeerCellarServiceServer) Consolidate(context.Context, *ConsolidateRequest) (*ConsolidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consolidate not implemented")
}
func (UnimplementedBeerCellarServiceServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}

// UnsafeBeerCellarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeerCellarServiceServer will
// result in compilation errors.
type UnsafeBeerCellarServiceServer interface {
	mustEmbedUnimplementedBeerCellarServiceServer()
}

func RegisterBeerCellarServiceServer(s grpc.ServiceRegistrar, srv BeerCellarServiceServer) {
	s.RegisterService(&_BeerCellarService_serviceDesc, srv)
}

func _BeerCellarService_AddBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).AddBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beerserver.BeerCellarService/AddBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).AddBeer(ctx, req.(*AddBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerCellarService_DeleteBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).DeleteBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beerserver.BeerCellarService/DeleteBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).DeleteBeer(ctx, req.(*DeleteBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerCellarService_ListBeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).ListBeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beerserver.BeerCellarService/ListBeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).ListBeers(ctx, req.(*ListBeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerCellarService_Consolidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsolidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).Consolidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beerserver.BeerCellarService/Consolidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).Consolidate(ctx, req.(*ConsolidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeerCellarService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeerCellarServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beerserver.BeerCellarService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeerCellarServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeerCellarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "beerserver.BeerCellarService",
	HandlerType: (*BeerCellarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBeer",
			Handler:    _BeerCellarService_AddBeer_Handler,
		},
		{
			MethodName: "DeleteBeer",
			Handler:    _BeerCellarService_DeleteBeer_Handler,
		},
		{
			MethodName: "ListBeers",
			Handler:    _BeerCellarService_ListBeers_Handler,
		},
		{
			MethodName: "Consolidate",
			Handler:    _BeerCellarService_Consolidate_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BeerCellarService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "beer.proto",
}
